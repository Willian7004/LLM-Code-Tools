》》写一个python程序，实现以下功能：

1.在程序开头填写需要读取的文件格式，默认读取. py格式。使用utf-8编码读取当前目录下的code文件夹中所有相应格式的文件，包含子文件夹中相应格式的文件。

2.导入“api”包，把上一步读取到的文件以字符串形式依次传入api. note()函数，在函数返回的字符串中匹配从“```”到下一个“```”之间的字符再去掉匹配到的字符的第一行，用utf-8编码把这部分字符写入对应文件（覆盖文件原有内容）。

》
```python
import os
import re
from api import note

def read_files(directory, file_extension='.py'):
    file_paths = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith(file_extension):
                file_paths.append(os.path.join(root, file))
    return file_paths

def process_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    processed_content = note(content)
    match = re.search(r'```(.*?)```', processed_content, re.DOTALL)
    if match:
        extracted_content = match.group(1).strip().split('\n', 1)[1]
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(extracted_content)

def main():
    directory = 'code'
    file_extension = '.py'
    file_paths = read_files(directory, file_extension)
    for file_path in file_paths:
        process_file(file_path)

if __name__ == "__main__":
    main()
```

这个程序实现了以下功能：

1. 在程序开头填写需要读取的文件格式，默认读取 `.py` 格式。使用 `utf-8` 编码读取当前目录下的 `code` 文件夹中所有相应格式的文件，包含子文件夹中相应格式的文件。

2. 导入 `api` 包，把上一步读取到的文件以字符串形式依次传入 `api.note()` 函数，在函数返回的字符串中匹配从 ```` ``` ```` 到下一个 ```` ``` ```` 之间的字符再去掉匹配到的字符的第一行，用 `utf-8` 编码把这部分字符写入对应文件（覆盖文件原有内容）。

